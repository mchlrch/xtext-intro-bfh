/**
 * generated by Xtext 2.14.0
 */
package com.acme.homeautomation.dsl.generator;

import com.acme.homeautomation.dsl.ModelAccess;
import com.acme.homeautomation.dsl.harDsl.Device;
import com.acme.homeautomation.dsl.harDsl.Rule;
import com.acme.homeautomation.dsl.harDsl.State;
import com.google.common.collect.Iterators;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class HarDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Iterable<Rule> rules = IteratorExtensions.<Rule>toList(Iterators.<Rule>filter(resource.getAllContents(), Rule.class));
    boolean _isEmpty = IterableExtensions.isEmpty(rules);
    boolean _not = (!_isEmpty);
    if (_not) {
      final String dslFileName = resource.getURI().lastSegment().toString();
      final String outFileBase = dslFileName.substring(0, dslFileName.lastIndexOf("."));
      fsa.generateFile((outFileBase + ".js"), this.generateJavascript(rules));
    }
  }
  
  public CharSequence generateJavascript(final Iterable<Rule> rules) {
    StringConcatenation _builder = new StringConcatenation();
    final Function1<Device, CharSequence> _function = (Device dev) -> {
      return this.deviceStateEnumeration(dev);
    };
    String _join = IterableExtensions.join(ListExtensions.<Device, CharSequence>map(ModelAccess.inDeterministicOrder(ModelAccess.devicesUsed(rules)), _function), "\n");
    _builder.append(_join);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("// device state");
    _builder.newLine();
    _builder.append("const state = {");
    _builder.newLine();
    {
      List<Device> _inDeterministicOrder = ModelAccess.inDeterministicOrder(ModelAccess.devicesUsed(rules));
      boolean _hasElements = false;
      for(final Device device : _inDeterministicOrder) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "\t");
        }
        _builder.append("\t");
        String _varName = this.varName(device);
        _builder.append(_varName, "\t");
        _builder.append(": ");
        CharSequence _enumValueName = this.enumValueName(IterableExtensions.<State>head(device.getStates()));
        _builder.append(_enumValueName, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("function event(sensor) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("const oldState = Object.assign({}, state)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// update device state based on sensor input");
    _builder.newLine();
    {
      final Function1<Device, EList<State>> _function_1 = (Device dev) -> {
        return dev.getStates();
      };
      Iterable<State> _flatMap = IterableExtensions.<Device, State>flatMap(ModelAccess.inDeterministicOrder(ModelAccess.devicesUsed(rules)), _function_1);
      for(final State state : _flatMap) {
        _builder.append("    ");
        _builder.append("if (sensor == ");
        CharSequence _enumValueName_1 = this.enumValueName(state);
        _builder.append(_enumValueName_1, "    ");
        _builder.append(") state.");
        String _varName_1 = this.varName(ModelAccess.declaringDevice(state));
        _builder.append(_varName_1, "    ");
        _builder.append(" = ");
        CharSequence _enumValueName_2 = this.enumValueName(state);
        _builder.append(_enumValueName_2, "    ");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// evaluate rules");
    _builder.newLine();
    {
      for(final Rule rule : rules) {
        _builder.append("    ");
        _builder.append("if (sensor == ");
        CharSequence _enumValueName_3 = this.enumValueName(rule.getWhen());
        _builder.append(_enumValueName_3, "    ");
        _builder.append(") state.");
        String _varName_2 = this.varName(ModelAccess.declaringDevice(rule.getThen()));
        _builder.append(_varName_2, "    ");
        _builder.append(" = ");
        CharSequence _enumValueName_4 = this.enumValueName(rule.getThen());
        _builder.append(_enumValueName_4, "    ");
        _builder.append("\t\t    ");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (stateChange(oldState, state)) return state");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("function stateChange(s1, s2) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return");
    _builder.newLine();
    {
      List<Device> _inDeterministicOrder_1 = ModelAccess.inDeterministicOrder(ModelAccess.devicesUsed(rules));
      boolean _hasElements_1 = false;
      for(final Device device_1 : _inDeterministicOrder_1) {
        if (!_hasElements_1) {
          _hasElements_1 = true;
        } else {
          _builder.appendImmediate(" || ", "    ");
        }
        _builder.append("    ");
        _builder.append("s1.");
        String _varName_3 = this.varName(device_1);
        _builder.append(_varName_3, "    ");
        _builder.append(" != s2.");
        String _varName_4 = this.varName(device_1);
        _builder.append(_varName_4, "    ");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("console.log(`supported states:");
    _builder.newLine();
    {
      final Function1<Device, EList<State>> _function_2 = (Device dev) -> {
        return dev.getStates();
      };
      Iterable<State> _flatMap_1 = IterableExtensions.<Device, State>flatMap(ModelAccess.inDeterministicOrder(ModelAccess.devicesUsed(rules)), _function_2);
      for(final State state_1 : _flatMap_1) {
        _builder.append("\t");
        CharSequence _enumValueName_5 = this.enumValueName(state_1);
        _builder.append(_enumValueName_5, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("`);");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence deviceStateEnumeration(final Device device) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("// device: ");
    String _name = device.getName();
    _builder.append(_name);
    _builder.newLineIfNotEmpty();
    _builder.append("const ");
    String _name_1 = device.getName();
    _builder.append(_name_1);
    _builder.append(" = Object.freeze({");
    _builder.newLineIfNotEmpty();
    {
      EList<State> _states = device.getStates();
      boolean _hasElements = false;
      for(final State state : _states) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "\t");
        }
        _builder.append("\t");
        String _name_2 = state.getName();
        _builder.append(_name_2, "\t");
        _builder.append(": Symbol(\"");
        String _name_3 = state.getName();
        _builder.append(_name_3, "\t");
        _builder.append("\")");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("})");
    _builder.newLine();
    return _builder;
  }
  
  public String varName(final Device device) {
    return StringExtensions.toFirstLower(device.getName());
  }
  
  public CharSequence enumValueName(final State state) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = ModelAccess.declaringDevice(state).getName();
    _builder.append(_name);
    _builder.append(".");
    String _name_1 = state.getName();
    _builder.append(_name_1);
    return _builder;
  }
}
